
handlers = java.util.logging.ConsoleHandler
.level = INFO
java.util.logging.SimpleFormatter.format = %5$s%n

# impl can be preset, class (constructor takes Options) or method with API match (if no options).

# ---- Logging Backend Naming Strategy ----
# Logger naming controls which logger backends are used for configuration.
#
# Using a strategy which maps many loggers to a few backends can greatly reduce the number of
# native loggers required and (along with backend caching) speed up static initialization.
#
# To override the default strategy, set "flogger.backend_naming.impl" to a plugin class implementing
# "net.goui.flogger.backend.common.NamingStrategy".

# Classes/packages listed here form the root loggers of any classes under them. Any logging class
# matched to one of these will use the matched value directly without any additional trimming.
#
# Note: Setting explicit root entries will not enable backend caching by default (see below).
flogger.backend_naming.roots.size = 2
flogger.backend_naming.roots.0 = net.goui.flogger.*
flogger.backend_naming.roots.1 = net.goui.flogger.backend.system.FloggerRootLogger

# For classes not under the above package roots, there are rules for trimming names.
#
# For example, given the logging class "com.foo.bar.baz.SomeClass":
# -- "trim_at_least = 2" will remove the last 2 name segments resulting in "com.foo.bar"
# -- "retain_at_most = 4" will trim until there are 4 segments left, resulting in "com.foo.bar.baz"
#
# If both the above options are specified, the *shortest* result is used (this ensures that
# "trim_at_least = 1" will always truncate to use package names as expected).
#
# Note: If either of these options is non-zero, backend caching will be enabled by default.
flogger.backend_naming.trim_at_least = 1
flogger.backend_naming.retain_at_most = 3

# If set, this option will extract any loggers configured by level in this logging.properties file
# and use them as additional logging roots (this can reduce duplication).
flogger.backend_naming.use_system_roots = true

# Depending on the naming scheme, it can be desirable to cache the backend instances, so they are
# shared between many logging classes. Each naming strategy has a default setting for whether it
# should use caching, but that value can be overridden here if needed.
flogger.use_backend_cache = true

# Examples of system configured loggers which will be imported if "use_system_roots = true".
net.goui.flogger.backend.system.SystemRootLogger.level = WARNING


# ---- Message Formatting ----
flogger.message_formatter.pattern = %{timestamp} [%{location}]%{level} %{key.xxx/(Foo:/) }%{message}%{metadata/ [/]}
flogger.message_formatter.metadata.key.xxx = net.goui.flogger.backend.system.SystemBackendFactoryTest$Key#FOO
flogger.message_formatter.metadata.ignore = @myapp.ignored_keys

# Common to many formatters, since it's easy to exclude keys during metadata processing.
myapp.ignored_keys.size = 2
myapp.ignored_keys.0 = com.google.common.flogger.LogContext$Key#LOG_EVERY_N
myapp.ignored_keys.1 = com.google.common.flogger.LogContext$Key#LOG_AT_MOST_EVERY
